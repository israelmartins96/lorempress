{"version":3,"file":"random-lorem-generator-bundled.min.js","sources":["random-lorem-generator-bundled.min.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n/**\r\n * Custom Input Field Behaviours.\r\n *\r\n * @description Handles the behaviour/functionality of the custom number input field.\r\n * @since 2.0.0\r\n * @version 1.0.0\r\n * @author Israel Martins <hello@israelmartins.com>, Lightbulb Devs <dev@lightbulbdevs.com>\r\n */\n\n/**\r\n * @function enableCustomInput\r\n * @description Initialises the custom number input field, attaching event listeners for increment, decrement, focus, and input.\r\n */\nvar enableCustomInput = function enableCustomInput() {\n  /**\r\n   * @constant {Element} paragraphCountFieldGroup\r\n   * @description The DOM element for the input group containing the paragraph count field.\r\n   */\n  var paragraphCountFieldGroup = document.querySelector('.input-group.paragraph-count');\n  /**\r\n   * @constant {string} paragraphCountFieldFocusClass\r\n   * @description The CSS class applied to the input group when the field is focused or has a value.\r\n   */\n  var paragraphCountFieldFocusClass = 'input-focused';\n  /**\r\n   * @constant {Element} paragraphCountField\r\n   * @description The DOM element for the paragraph count input field itself.\r\n   */\n  var paragraphCountField = document.querySelector('#paragraph-count-field');\n  /**\r\n   * @constant {string} paragraphCountFieldPlaceholder\r\n   * @description The original placeholder text for the paragraph count field.\r\n   */\n  var paragraphCountFieldPlaceholder = 'Number of paragraphs';\n\n  /**\r\n   * @constant {Element} incrementButton\r\n   * @description The DOM element for the button that increments the input field's value.\r\n   */\n  var incrementButton = document.querySelector('.increment');\n  /**\r\n   * @constant {Element} decrementButton\r\n   * @description The DOM element for the button that decrements the input field's value.\r\n   */\n  var decrementButton = document.querySelector('.decrement');\n\n  /**\r\n   * @constant {number} incrementBy\r\n   * @description The unit by which the number input field's value is incremented per increment.\r\n   */\n  var incrementBy = 1;\n  /**\r\n   * @constant {number} decrementBy\r\n   * @description The unit by which the number input field's value is decremented per decrement.\r\n   */\n  var decrementBy = -1;\n\n  /**\r\n   * @function hideCountFieldLabel\r\n   * @description Hides the custom label/placeholder by removing the focus class from the input group\r\n   * and restoring the placeholder attribute, but only if the field is empty.\r\n   */\n  var hideCountFieldLabel = function hideCountFieldLabel() {\n    if (paragraphCountFieldGroup.classList.contains(paragraphCountFieldFocusClass) && paragraphCountField.value.length < 1) {\n      paragraphCountFieldGroup.classList.remove(paragraphCountFieldFocusClass);\n      paragraphCountField.setAttribute('placeholder', paragraphCountFieldPlaceholder);\n    }\n  };\n\n  /**\r\n   * @function showCountFieldLabel\r\n   * @description Shows the custom label/placeholder by adding the focus class to the input group\r\n   * and removing the native placeholder attribute when the field contains a value.\r\n   */\n  var showCountFieldLabel = function showCountFieldLabel() {\n    if (!paragraphCountFieldGroup.classList.contains(paragraphCountFieldFocusClass) && paragraphCountField.value.length >= 1) {\n      paragraphCountFieldGroup.classList.add(paragraphCountFieldFocusClass);\n      paragraphCountField.removeAttribute('placeholder');\n    }\n  };\n\n  /**\r\n   * @function removeLeadingZero\r\n   * @description Removes any leading zeros from the input field's value.\r\n   */\n  var removeLeadingZero = function removeLeadingZero() {\n    if (paragraphCountField.value.startsWith('0')) {\n      paragraphCountField.value = paragraphCountField.value.replace(/^0+/, '');\n    }\n  };\n\n  /**\r\n   * @function updateValue\r\n   * @description Updates the numeric value of the input field based on a given delta.\r\n   * Ensures the value does not go below 1, clearing the field if it does.\r\n   * @param {number} delta - The amount to add or subtract from the current value (e.g., 1 for increment, -1 for decrement).\r\n   */\n  var updateValue = function updateValue(delta) {\n    var currentValue = parseInt(paragraphCountField.value) || 0;\n    var newValue = currentValue + delta;\n    if (newValue < 1) {\n      paragraphCountField.value = '';\n      hideCountFieldLabel();\n      return;\n    }\n    paragraphCountField.value = newValue;\n    showCountFieldLabel();\n  };\n\n  /**\r\n   * @function doCountFieldKeyEvent\r\n   * @description Handles keyboard events for the input field, specifically ArrowUp/Down for value changes\r\n   * and Escape for blurring the field. Prevents '0' key press directly to avoid leading zeros.\r\n   * @param {KeyboardEvent} event - The keyboard event object.\r\n   */\n  var doCountFieldKeyEvent = function doCountFieldKeyEvent(event) {\n    switch (event.key) {\n      case 'ArrowUp':\n        event.preventDefault();\n        updateValue(incrementBy);\n        break;\n      case 'ArrowDown':\n        event.preventDefault();\n        updateValue(decrementBy);\n        break;\n      case 'Escape':\n        paragraphCountField.blur();\n        hideCountFieldLabel();\n        break;\n      case '0':\n        event.preventDefault();\n        break;\n    }\n  };\n\n  /**\r\n   * Calls `showCountFieldLabel` initially to set the correct display state on load.\r\n   */\n  showCountFieldLabel();\n\n  /**\r\n   * Event listener for when the paragraph count field gains focus.\r\n   */\n  paragraphCountField.addEventListener('focus', showCountFieldLabel);\n  /**\r\n   * Event listener for when the paragraph count field loses focus.\r\n   */\n  paragraphCountField.addEventListener('blur', hideCountFieldLabel);\n  /**\r\n   * Event listener for the increment button click.\r\n   */\n  incrementButton.addEventListener('click', function () {\n    return updateValue(incrementBy);\n  });\n  /**\r\n   * Event listener for the decrement button click.\r\n   */\n  decrementButton.addEventListener('click', function () {\n    return updateValue(decrementBy);\n  });\n  /**\r\n   * Event listener for input changes in the paragraph count field, to remove leading zeros.\r\n   */\n  paragraphCountField.addEventListener('input', removeLeadingZero);\n  /**\r\n   * Event listener for keydown events in the paragraph count field, to handle arrow keys and escape.\r\n   */\n  paragraphCountField.addEventListener('keydown', doCountFieldKeyEvent);\n};\n\n/**\r\n * Run the `enableCustomInput` function once the entire HTML document has been loaded and parsed.\r\n */\ndocument.addEventListener('DOMContentLoaded', enableCustomInput);\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\n/**\r\n * Random Lorem Generator (Main Application Script).\r\n * \r\n * @description Handles the generation of non-distracting random dummy placeholder text.\r\n * @version 2.0.0\r\n * @author Israel Martins <hello@israelmartins.com>, Lightbulb Devs <dev@lightbulbdevs.com>\r\n */\n\n/**\r\n * @function initialiseRandomLoremGenerator\r\n * @description Initialises the Random Lorem Generator, setting up variables, helper functions, and event listeners.\r\n */\nvar initialiseRandomLoremGenerator = function initialiseRandomLoremGenerator() {\n  /**\r\n   * @constant {string} rlgInitMessage\r\n   * @description Text generator initialisation message for console output.\r\n   */\n  var rlgInitMessage = 'Init Random Lorem Generator âœ”';\n\n  /**\r\n   * @constant {number} minSentenceWords\r\n   * @description Minimum number of words in a generated sentence.\r\n   */\n  var minSentenceWords = 11;\n  /**\r\n   * @constant {number} maxSentenceWords\r\n   * @description Maximum number of words in a generated sentence.\r\n   */\n  var maxSentenceWords = 20;\n\n  /**\r\n   * @constant {number} minParagraphSentences\r\n   * @description Minimum number of sentences in a generated paragraph.\r\n   */\n  var minParagraphSentences = 7;\n  /**\r\n   * @constant {number} maxParagraphSentences\r\n   * @description Maximum number of sentences in a generated paragraph.\r\n   */\n  var maxParagraphSentences = 10;\n\n  /**\r\n   * @var {Array<Object>} responseText\r\n   * @description Stores the raw data fetched from the dummy text source.\r\n   */\n  var responseText = [];\n\n  /**\r\n   * @var {string} stringOfWords\r\n   * @description A string containing all words from the selected dummy text source.\r\n   */\n  var stringOfWords = '';\n\n  /**\r\n   * @var {Array<string>} arrayOfWords\r\n   * @description An array of individual words derived from `stringOfWords`.\r\n   */\n  var arrayOfWords = [];\n\n  /**\r\n   * @var {string} theParagraph\r\n   * @description Stores the current paragraph being constructed.\r\n   */\n  var theParagraph;\n\n  /**\r\n   * @var {Array<string>} arrayOfParagraphs\r\n   * @description Stores all generated paragraphs.\r\n   */\n  var arrayOfParagraphs = [];\n\n  /**\r\n   * @var {number} paragraphIndex\r\n   * @description Index to keep track of the current paragraph being processed or displayed.\r\n   */\n  var paragraphIndex = 0;\n\n  /**\r\n   * @function randomNumber\r\n   * @description Generates a random floating-point number between 0 (inclusive) and 1 (exclusive).\r\n   * @returns {number} A random number.\r\n   */\n  var randomNumber = function randomNumber() {\n    return Math.random();\n  };\n\n  /**\r\n   * @function randomInteger\r\n   * @description Generates a random integer between 0 (inclusive) and 9 (inclusive).\r\n   * @returns {number} A random integer.\r\n   */\n  var randomInteger = function randomInteger() {\n    return Math.floor(randomNumber() * 10);\n  };\n\n  /**\r\n   * @function restrictRandomIntegerToRange\r\n   * @description Restricts a random integer to be within a specified minimum and maximum range.\r\n   * @param {number} min - The minimum allowed value.\r\n   * @param {number} max - The maximum allowed value.\r\n   * @returns {number} A random integer within the specified range.\r\n   */\n  var restrictRandomIntegerToRange = function restrictRandomIntegerToRange(min, max) {\n    return Math.min(Math.max(min, randomInteger()), max);\n  };\n\n  /**\r\n   * @function selectRandomArrayIndex\r\n   * @description Selects a random element from an array.\r\n   * @param {Array<any>} arrayOfWords - The array from which to select an element.\r\n   * @returns {any} A randomly selected element from the array.\r\n   */\n  var selectRandomArrayIndex = function selectRandomArrayIndex(arrayOfWords) {\n    var minIndex = 0;\n    var maxIndex = arrayOfWords.length - 1;\n    var selectedStringOfWordsIndex = restrictRandomIntegerToRange(minIndex, maxIndex);\n    return arrayOfWords[selectedStringOfWordsIndex];\n  };\n\n  /**\r\n   * @function convertStringToArray\r\n   * @description Converts a string into an array of substrings, split by spaces.\r\n   * @param {string} string - The string to convert.\r\n   * @returns {Array<string>} An array of words.\r\n   */\n  var convertStringToArray = function convertStringToArray(string) {\n    return string.split(' ');\n  };\n\n  /**\r\n   * @function getLastArrayIndex\r\n   * @description Gets the index of the last item in an array.\r\n   * @param {Array<any>} array - The array to query.\r\n   * @returns {number} The index of the last element.\r\n   */\n  var getLastArrayIndex = function getLastArrayIndex(array) {\n    var lastArrayIndex = array.length - 1;\n    return lastArrayIndex;\n  };\n\n  /**\r\n   * @function getRandomArrayIndex\r\n   * @description Picks a random index from an array.\r\n   * @param {Array<any>} array - The array to query.\r\n   * @returns {number} A random valid index for the given array.\r\n   */\n  var getRandomArrayIndex = function getRandomArrayIndex(array) {\n    var lastArrayIndex = getLastArrayIndex(array);\n    return restrictRandomIntegerToRange(0, lastArrayIndex);\n  };\n\n  /**\r\n   * @function pickRandomSentenceWordCount\r\n   * @description Picks a random word count for a sentence, within the defined min/max.\r\n   * @returns {number} The chosen word count for a sentence.\r\n   */\n  var pickRandomSentenceWordCount = function pickRandomSentenceWordCount() {\n    return restrictRandomIntegerToRange(minSentenceWords, maxSentenceWords);\n  };\n\n  /**\r\n   * @function pickRandomSentenceCount\r\n   * @description Picks a random sentence count for a paragraph, within the defined min/max.\r\n   * @returns {number} The chosen sentence count for a paragraph.\r\n   */\n  var pickRandomSentenceCount = function pickRandomSentenceCount() {\n    return restrictRandomIntegerToRange(minParagraphSentences, maxParagraphSentences);\n  };\n\n  /**\r\n   * @function capitaliseFirstLetter\r\n   * @description Capitalises the first letter of a given string.\r\n   * @param {string} string - The input string.\r\n   * @returns {string} The string with its first letter capitalised.\r\n   */\n  var capitaliseFirstLetter = function capitaliseFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  /**\r\n   * @function makeRandomSentenceFromArray\r\n   * @description Generates a sentence of random words from a provided array, ensuring words do not repeat.\r\n   * @param {Array<string>} array - The source array of words.\r\n   * @returns {string} A randomly generated sentence.\r\n   */\n  var makeRandomSentenceFromArray = function makeRandomSentenceFromArray(array) {\n    /**\r\n     * @var {Array<string>} sentenceWords\r\n     * @description Words that would make up the sentence are passed to this array.\r\n     */\n    var sentenceWords = [];\n    /**\r\n     * @var {string} theSentence\r\n     * @description The eventual complete sentence.\r\n     */\n    var theSentence;\n    /**\r\n     * @constant {number} sentenceWordCount\r\n     * @description Randomly generated number of words for the sentence.\r\n     */\n    var sentenceWordCount = pickRandomSentenceWordCount();\n    /**\r\n     * @constant {number} lastArrayIndex\r\n     * @description The index of the last item in the source array.\r\n     */\n    var lastArrayIndex = getLastArrayIndex(array);\n    /**\r\n     * @function arrayIndex\r\n     * @description Returns a randomly generated array item index.\r\n     * @returns {number} A random index.\r\n     */\n    var arrayIndex = function arrayIndex() {\n      return getRandomArrayIndex(array);\n    };\n\n    /**\r\n     * Populates `sentenceWords` with words until its count equals `sentenceWordCount`.\r\n     */\n    while (sentenceWordCount > sentenceWords.length) {\n      sentenceWords.push(array[arrayIndex()]);\n    }\n\n    /**\r\n     * Prevents words from appearing more than once in a sentence.\r\n     * Replaces `sentenceWords` with the unique words.\r\n     */\n    sentenceWords.reduce(function (nonRepeatingArray, arrayItem) {\n      if (nonRepeatingArray.indexOf(arrayItem) === -1) {\n        nonRepeatingArray.push(arrayItem);\n      }\n      sentenceWords = nonRepeatingArray;\n      return nonRepeatingArray;\n    }, []);\n\n    /**\r\n     * Merges the array of words into a single sentence string.\r\n     */\n    theSentence = sentenceWords.join(' ');\n\n    /**\r\n     * Capitalises the first letter of the sentence.\r\n     */\n    theSentence = capitaliseFirstLetter(theSentence);\n\n    /**\r\n     * Adds a full stop at the end of the sentence.\r\n     */\n    theSentence += '.';\n    return theSentence;\n  };\n\n  /**\r\n   * @constant {Element} paragraphCountFieldGroup\r\n   * @description DOM element for the paragraph count input group.\r\n   */\n  var paragraphCountFieldGroup = document.querySelector('.input-group.paragraph-count');\n  /**\r\n   * @constant {string} paragraphCountFieldFocusClass\r\n   * @description CSS class applied when the paragraph count field is focused.\r\n   */\n  var paragraphCountFieldFocusClass = 'input-focused';\n  /**\r\n   * @constant {string} paragraphCountFieldPlaceholder\r\n   * @description Placeholder text for the paragraph count input field.\r\n   */\n  var paragraphCountFieldPlaceholder = 'Number of paragraphs';\n\n  /**\r\n   * @constant {Element} paragraphCountField\r\n   * @description DOM element for the paragraph count input field.\r\n   */\n  var paragraphCountField = document.querySelector('#paragraph-count-field');\n\n  /**\r\n   * @constant {Element} textGenerationTrigger\r\n   * @description DOM element for the button that triggers text generation.\r\n   */\n  var textGenerationTrigger = document.querySelector('.generate-text-trigger');\n\n  /**\r\n   * @constant {Element} resetTrigger\r\n   * @description DOM element for the button that triggers a reset.\r\n   */\n  var resetTrigger = document.querySelector('.reset-trigger');\n\n  /**\r\n   * @constant {Element} outputSection\r\n   * @description DOM element for the section where generated text is displayed.\r\n   */\n  var outputSection = document.querySelector('.generated-text-area');\n\n  /**\r\n   * @constant {Element} copiableGeneratedText\r\n   * @description DOM element containing the generated text, designed for easy copying.\r\n   */\n  var copiableGeneratedText = document.querySelector('.copiable-generated-text');\n\n  /**\r\n   * @constant {Element} copyButton\r\n   * @description DOM element for the button that copies the generated text.\r\n   */\n  var copyButton = document.querySelector('.copy-text');\n\n  /**\r\n   * @constant {string} enabledButtonSelector\r\n   * @description CSS selector for a button in an enabled state.\r\n   */\n  var enabledButtonSelector = 'button-enabled';\n\n  /**\r\n   * @constant {string} disabledButtonSelector\r\n   * @description CSS selector for a button in a disabled state.\r\n   */\n  var disabledButtonSelector = 'button-disabled';\n\n  /**\r\n   * @function generateText\r\n   * @description Handles the main logic for generating paragraphs of text.\r\n   * It fetches source text if not already loaded and then proceeds with generation.\r\n   */\n  var _generateText = function generateText() {\n    /**\r\n     * Removes the 'empty' class from the output section, making it visible or ready for content.\r\n     */\n    outputSection.classList.remove('empty');\n\n    /**\r\n     * @function proceedWithTextGeneration\r\n     * @description Inner function that generates sentences and paragraphs once the source text is available.\r\n     */\n    var proceedWithTextGeneration = function proceedWithTextGeneration() {\n      var arrayOfSentences = [];\n      /**\r\n       * Populates `arrayOfSentences` with random sentences until the desired count is met.\r\n       */\n      while (arrayOfSentences.length < pickRandomSentenceCount()) {\n        arrayOfSentences.push(makeRandomSentenceFromArray(arrayOfWords));\n      }\n\n      /**\r\n       * Joins the generated sentences to form a complete paragraph.\r\n       */\n      theParagraph = arrayOfSentences.join(' ');\n\n      /**\r\n       * Checks if more paragraphs are needed based on the user's input.\r\n       * Appends generated paragraphs to the output and the hidden copiable text area.\r\n       */\n      if (paragraphCountField.value > arrayOfParagraphs.length) {\n        arrayOfParagraphs.push(theParagraph);\n        outputSection.innerHTML += \"<p>\".concat(arrayOfParagraphs[paragraphIndex], \"</p>\");\n        copiableGeneratedText.innerHTML += \"\".concat(arrayOfParagraphs[paragraphIndex]);\n\n        /**\r\n         * Adds line breaks for readability in the copiable text if more paragraphs are expected.\r\n         * Otherwise, toggles the state of the reset and copy buttons.\r\n         */\n        if (paragraphCountField.value > arrayOfParagraphs.length) {\n          copiableGeneratedText.innerHTML += \"\\n\\n\";\n          paragraphIndex++;\n        } else {\n          toggleButtonState([resetTrigger, copyButton]);\n        }\n        return _generateText();\n      }\n    };\n\n    /**\r\n     * Fetches dummy text from a JSON file if `responseText` is empty.\r\n     * Parses the JSON and calls `proceedWithTextGeneration` upon success.\r\n     * Handles potential errors during the fetch operation.\r\n     */\n    if (responseText.length < 1) {\n      fetch('./data/data-dummy-text.json').then(function (response) {\n        if (!response.ok) throw new Error(\"HTTP error! Status: \".concat(response.status));\n        return response.json();\n      }).then(function (data) {\n        responseText = data;\n        stringOfWords = selectRandomArrayIndex(responseText).words;\n        arrayOfWords = convertStringToArray(stringOfWords);\n        proceedWithTextGeneration();\n      }).catch(function (error) {\n        console.error('Failed to load dummy text:', error);\n      });\n    } else {\n      /**\r\n       * If source text is already loaded, proceed directly with text generation.\r\n       */\n      proceedWithTextGeneration();\n    }\n  };\n\n  /**\r\n   * @function switchButtonState\r\n   * @description Switches the visual state of a given button between enabled and disabled.\r\n   * @param {Element} button - The button DOM element to switch state.\r\n   */\n  var switchButtonState = function switchButtonState(button) {\n    if (button.classList.contains(disabledButtonSelector)) {\n      button.classList.add(enabledButtonSelector);\n      button.classList.remove(disabledButtonSelector);\n      return;\n    } else {\n      /**\r\n       * If the copiable text area is empty, ensures the button remains disabled.\r\n       */\n      if (copiableGeneratedText.innerHTML.length < 1) {\n        button.classList.remove(enabledButtonSelector);\n        button.classList.add(disabledButtonSelector);\n      }\n    }\n  };\n\n  /**\r\n   * @function toggleButtonState\r\n   * @description Toggles the enabled/disabled state of one or more buttons.\r\n   * @param {Element|Array<Element>} button - A single button DOM element or an array of button DOM elements.\r\n   */\n  var toggleButtonState = function toggleButtonState(button) {\n    if (Array.isArray(button)) {\n      button.forEach(function (theButton) {\n        switchButtonState(theButton);\n      });\n      return;\n    } else {\n      switchButtonState(button);\n    }\n  };\n\n  /**\r\n   * @function clearCopiedState\r\n   * @description Resets the copy button's visual state if it currently shows \"Copied\".\r\n   */\n  var clearCopiedState = function clearCopiedState() {\n    if (copyButton.classList.contains('copied')) {\n      copyButton.classList.remove('copied');\n    }\n  };\n\n  /**\r\n   * @function doReset\r\n   * @description Resets all generated text variables, clears the output sections, and prepares for new generation.\r\n   */\n  var doReset = function doReset() {\n    arrayOfParagraphs = [];\n    paragraphIndex = 0;\n    outputSection.innerHTML = '';\n    copiableGeneratedText.innerHTML = '';\n    outputSection.classList.add('empty');\n    clearCopiedState();\n    paragraphCountField.focus();\n  };\n\n  /**\r\n   * @function hideCountFieldLabel\r\n   * @description Hides the focus class from the paragraph count field group and restores its placeholder.\r\n   */\n  var hideCountFieldLabel = function hideCountFieldLabel() {\n    if (paragraphCountFieldGroup.classList.contains(paragraphCountFieldFocusClass)) {\n      paragraphCountFieldGroup.classList.remove(paragraphCountFieldFocusClass);\n      paragraphCountField.setAttribute('placeholder', paragraphCountFieldPlaceholder);\n    }\n  };\n\n  /**\r\n   * @function outputGeneratedText\r\n   * @description Initiates the generation and output of text, ensuring a valid paragraph count.\r\n   */\n  var outputGeneratedText = function outputGeneratedText() {\n    /**\r\n     * Only generates text if the requested paragraph count is 1 or more.\r\n     */\n    if (paragraphCountField.value >= 1) {\n      /**\r\n       * Resets previous output and input variables.\r\n       */\n      doReset();\n\n      /**\r\n       * Generates the text, activates copy/reset buttons, and clears any \"copied\" state.\r\n       */\n      _generateText();\n      toggleButtonState([resetTrigger, copyButton]);\n      clearCopiedState();\n    }\n  };\n\n  /**\r\n   * @function copyGeneratedText\r\n   * @description Copies the content of `copiableGeneratedText` to the user's clipboard.\r\n   * Also updates the copy button's visual state to indicate \"Copied\".\r\n   */\n  var copyGeneratedText = function copyGeneratedText() {\n    /**\r\n     * Selects and copies the text from the hidden output area.\r\n     */\n    copiableGeneratedText.select();\n    document.execCommand('copy');\n\n    /**\r\n     * Adds a 'copied' class to the button for visual feedback.\r\n     */\n    copyButton.classList.add('copied');\n\n    /**\r\n     * Sets a timeout to remove the 'copied' class after a brief period.\r\n     */\n    unsetCopiedState = setTimeout(function () {\n      copyButton.classList.remove('copied');\n    }, 2000);\n  };\n\n  /**\r\n   * Event listener for the text generation trigger button.\r\n   * Prevents default form submission and calls `outputGeneratedText`.\r\n   */\n  textGenerationTrigger.addEventListener('click', function (event) {\n    event.preventDefault();\n    outputGeneratedText();\n  });\n\n  /**\r\n   * Event listener for the reset trigger button.\r\n   * Resets the form and output, hides the count field label, and toggles button states.\r\n   */\n  resetTrigger.addEventListener('click', function () {\n    doReset();\n    hideCountFieldLabel();\n    toggleButtonState([resetTrigger, copyButton]);\n  });\n\n  /**\r\n   * Event listener for the copy button.\r\n   * Calls `copyGeneratedText` when clicked.\r\n   */\n  copyButton.addEventListener('click', copyGeneratedText);\n\n  /**\r\n   * Logs the initialisation message to the console.\r\n   */\n  console.log(rlgInitMessage);\n};\n\n/**\r\n * Event listener for the DOMContentLoaded event.\r\n * Ensures the `initialiseRandomLoremGenerator` function runs once the entire HTML document has been loaded and parsed.\r\n */\ndocument.addEventListener('DOMContentLoaded', initialiseRandomLoremGenerator);\n\n},{}]},{},[2,1]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","document","addEventListener","hideCountFieldLabel","paragraphCountFieldGroup","classList","contains","paragraphCountFieldFocusClass","paragraphCountField","value","remove","setAttribute","showCountFieldLabel","add","removeAttribute","updateValue","delta","newValue","parseInt","querySelector","incrementButton","decrementButton","startsWith","replace","event","key","preventDefault","blur","2","doReset","arrayOfParagraphs","paragraphIndex","outputSection","innerHTML","copiableGeneratedText","clearCopiedState","focus","theParagraph","minSentenceWords","maxSentenceWords","minParagraphSentences","maxParagraphSentences","responseText","stringOfWords","arrayOfWords","randomNumber","Math","random","randomInteger","floor","restrictRandomIntegerToRange","min","max","selectRandomArrayIndex","maxIndex","convertStringToArray","string","split","getLastArrayIndex","array","getRandomArrayIndex","lastArrayIndex","pickRandomSentenceWordCount","pickRandomSentenceCount","capitaliseFirstLetter","charAt","toUpperCase","slice","makeRandomSentenceFromArray","theSentence","sentenceWords","sentenceWordCount","push","reduce","nonRepeatingArray","arrayItem","indexOf","join","textGenerationTrigger","resetTrigger","copyButton","enabledButtonSelector","disabledButtonSelector","_generateText","proceedWithTextGeneration","arrayOfSentences","concat","toggleButtonState","fetch","then","response","ok","json","status","data","words","catch","error","console","switchButtonState","button","Array","isArray","forEach","theButton","select","execCommand","unsetCopiedState","setTimeout","log"],"mappings":"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"}